-------------------------------------------

Роли пока три:
    1 - user - 'Обычный пользователь' (пока при регистрации все создаются с такой ролью - в БД значение по умолчанию)
    2 - moderator - 'Модератор контента'
    3 - admin - 'Администратор системы'

У объявления м.б. статусы:
    * draft - Черновик(новое, возвращенное с модерации, снятое с публикации)
    * moderation На модерации
    * published - Опубликовано

-------------------------------------------

1)Неавторизованный пользователь
    * у пользователя нет роли, а во вх.параметрах HTTP запроса нет токенов доступа (auth-service не вызывается)
    * токены просрочены (установили вызвав auth-service)
Доступно:
    - Просмотр всех объявлений в статусе Опубликовано(*сортировка, *выдача кусками-оффсетами)
    - Выбор категорий объявлений

2) Обычный пользователь
    * у пользователя во вх.параметрах HTTP запроса валидный токен доступа с ролью user (проверили в auth-service)
Доступно:
    - Просмотр всех объявлений в статусе Опубликовано(*сортировка, *выдача кусками-оффсетами)
    - Выбор категорий объявлений
    - Просмотр всех своих объявлений
    - Обработка своих объявлений(создание, удаление, публикация(отправляется на модерацию), снятие с публикации)

3) Модератор и администратор
     * у пользователя во вх.параметрах HTTP запроса валидный токен доступа с ролью moderator или admin(проверили в auth-service)
Доступно
    - Просмотр объявлений(*сортировка, *выдача кусками-оффсетами)
    - Выбор категорий объявлений
    - Просмотр всех объявлений независимо от статуса
    - Просмотр(или отбор) объявлений в статусе "На модерации"
    - Одобрение к публикации объявления(в статусе "На модерации" -> "Опубликовано")
    - Возврат в черновики объявления (в статусе "На модерации" -> "Черновик")
    - Снятие с публикации объявлений(в статусе "Опубликовано" -> "Черновик")

-------------------------------------------
Шлюз
!Сейчас в ХТТП АПИ нет ручки дергающей RefreshToken
!Думаю, потом добавим POST /login, а в auth_service я сделаю отзыв токена


АПИ шлюза:

POST /auth/register - регистрация пользователя(имя+пасс+почта)
POST /auth/token - логининг(имя+пасс)
GET /auth/validate - валидация (access_token)
POST /auth/refresh - обновление (refresh_token)

/moderation
Требования: Валидный access_token с ролью moderator или admin
    GET /ads - просмотр объявлений админами/модерами
        - фильтр по статусу (draft, published, moderation)
        - номер страницы
        - количество на странице.
        ПРимер: GET /moderation/ads?status=moderation&page=1&limit=20
    POST /ads/{id}/approve - одобрение(PATCH /moderation/ads/123/approve)
    POST /ads/{id}/reject - отклонение(PATCH /moderation/ads/123/reject)


GET /categories - список категорий, доступный всем

POST /ads - создание объявления, только для авторизированных пользователей
Требования: валидный access_token с ролью user
Допка: дадим пользователю указать сразу контакты для связи(вроде у авито также, для каждого объявления можно задать уникальные).
Короче кажется, что contact_info д.б. списком или массивом.
    {
    "title": "Выгуляю вашу собаку",
    "description": "Выгуляю вашу собаку. Я в этом опытен. В удобное для вас время",
    "price": 15000,
    "category_id": 2,
    "contact_info": {
        "phone": "+1234567890,
        "email": "example@example.com",
        "telegram": "@dog_walker"
        }
    }

PUT /ads/{id} - изменение своего объявления, только для авторизированных пользователей
Требования: валидный access_token с ролью user
    {
    "title": "Выгуляю вашу собаку, кота, курицу или кенгуру",
    "description": "Выгуляю вашего питомца. Я в этом опытен. В удобное для вас время",
    "price": 22000,
    "category_id": 2,
    "contact_info": {
        "phone": "112",
        "telegram": "@dog_walker"
        }
    }

GET /ads - список объявлений, доступный всем
    По хорошему тут надо сделать возможность передачи параметров(типа GET /ads?page=1&limit=10&sort=date:desc,price:asc&category_id=123,456)
    - page: номер страницы (по умолчанию 1).
    - limit: количество записей на странице (по умолчанию 20).
    - sort: поля сортировки (date, price, title) и порядок (asc, desc). В моем примере - сначала сортировка по дате по убыванию, затем по цене по возрастанию
    - category_id: фильтр по категориям(можно список передать)

POST(лучше все же PATCH) /ads/{id}/publish - отправка на публикацию(на модерацию) своего объявления
Требования: Валидный access_token с ролью user

PATCH /ads/{id}/unpublish - снятие с публикации
Требования: Валидный access_token с ролью user

DELETE /ads/{id} удаление своего объявления
Требования: Валидный access_token с ролью user

GET /my-ads - список только своих объявлений
Требования: валидный access_token с ролью user, moderator или admin
Например: GET /my-ads?page=1&limit=10 //если сможем механизм оффсета сделать, то можем заложить(хотя не планировали вроде больше 5 объявлений)



















